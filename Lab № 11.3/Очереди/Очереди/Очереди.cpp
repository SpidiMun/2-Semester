#include <iostream>
#include <queue>
using namespace std;

/*
	Очередь - список, но работающий по принципу FIFO (first in - first out)
	Первый элемент очереди можно удалить, последний - добавить
	Работать можно только с первым и последним элементом
*/

queue<int> FormQueue(queue<int> Q, int Size)    // Функция формирования очереди
{
	cout << "Введите элементы очереди: ";
	int i;
	int Number;                                 // Переменная для записи элементов очереди
	for (i = 0; i < Size; i++)
	{
		cin >> Number;                          // Ввод элемента очереди в массив
		Q.push(Number);                         // Занесение элемента из массива в очередь
	}
	return Q;
}

void PrintQueue(queue<int> Q)            // Функция вывода очереди в консоль
{
	if (Q.size() != 0)
	{
		cout << "Вывожу очередь...\n";
		int Size = Q.size();             // Сохраняем размер очереди
		int i;
		for (i = 0; i < Size; i++)       // Непосредственный вывод элементов очереди
		{
			cout << Q.front() << " ";    // Выводим первый элемент очереди
			Q.pop();                     // Удаляем элемент из очереди
		}
		cout << endl;
	}
	else
	{
		cout << "Очередь пуста\n";
	}
}

queue<int> EditQueue(queue<int> Q)                 // Функция удаления чётных элементов из очереди
{
	cout << "Произвожу удаление чётных элементов очереди...\n";
	int Size = Q.size();                           // Сохраняем размер очереди 
	int i, j = 0;
	int* Mas = new int[Size];                      // Массив для сохранения порядка очереди (+ сохранение очереди)
	for (i = 0; i < Size; i++)                     // Отбор нечётных элементов для очереди
	{
		if (Q.front() % 2 != 0)                    // Если элемент очереди является чётным
		{
			Mas[j] = Q.front();                    // Заносим в массив
			Q.pop();                               // Удаляем элемент из очереди
			j++;                                   // Переход на новый элемент (при повторном заполнении очереди будет использован в качестве размера очереди)
		}
		else
		{
			Q.pop();
		}
	}
	i = 0;
	while (Mas[i] != 0 && i < j)                   // Повторное заполнение элементов в очереди
	{
		Q.push(Mas[i]);                            // Занесение элемента из массива в очередь
		i++;
	}
	return Q;
}

int main()
{
	setlocale(LC_ALL, "Russian");
	int N;                                                // Кол-во элементов в очереди
	cout << "Введите количество элементов в очереди: ";
	cin >> N;
	while (N < 3)                                         // Проверка числа на натуральность (натуральное ли оно)
	{
		cout << "Число элементов не может быть меньше трёх. Введите новое число элементов: ";
		cin >> N;
	}
	queue<int> Q;                                         // Создание пустой очереди
	Q = FormQueue(Q, N);
	PrintQueue(Q);                                        // Вывод очереди на консоль
	Q = EditQueue(Q);									  // Изменение очереди
	if (Q.size() == 0)
	{
		cout << "Очередь пуста\n";
	}
	else
	{
		PrintQueue(Q);									  // Вывод очереди на консоль
	}
}