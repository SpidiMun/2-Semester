#include <iostream>
using namespace std;

struct list          // Структура "Двунаправленный список"
{
	int data;        // Информационное поле (хранит элемент списка)
	list* next;      // Адресное поле (хранит указатель на следующий элемент списка)
	list* prev;      // Адресное поле (хранит указатель на предыдущий элемент списка)
};

list* FormList(int Size)                   // Функция записи списка
{
	cout << "Введите элементы списка\n";
	int i;
	list* p, *first;                       // first - указатель на первый элемент, p - указатель на следующий элемент
	first = NULL;
	p = new list;                          // Выделение памяти под элемент
	cin >> p->data;                        // Ввод элемента
	p->next = NULL;                        // Пока больше нет элементов, указатель равен нулю
	p->prev = NULL;                        // Т. к. это первый элемент(будущий), то указатель равен нулю
	first = p;                             // Указатель на первый элемент
	for (i = 2; i <= Size; i++)
	{
		list* q = new list;                // Выделение памяти под новый элемент
		list* h = p;                       // Указатель на "предыдущий" элемент (изначально тот, на котором стоит указатель на следующий)
		p->next = q;                       // Указывает на следующий элемент
		p = p->next;                       // Указатель на вводимый элемент
		cin >> p->data;                    // Ввод элемента
		p->next = NULL;                    // Следующий указатель на пустоту
		p->prev = h;                       // Указывает на предыдущий элемент
	}
	return first;                          // Возвращаем указатель на первый элемент, т. к. с него начинается обращение
}

void PrintList(list* first)                    // Функция вывода списка на консоль
{
	if (first != NULL)
	{
		cout << "Вывод списка...\n";
		list* p = first;                       // Указатель на первый элемент списка
		while (p != NULL)
		{
			cout << p->data << " ";            // Вывод значения элемента списка
			p = p->next;                       // Переход указателем на следующий элемент
		}
		cout << endl;
	}
	else
	{
	cout << "Список пуст\n";
	}
}

list* DeleteElementsInList(list* first)                    // Функция удаления чётных элементов списка
{
	cout << "Произвожу удаление чётных элементов...\n";
	list* p = first;                                       // Указатель на следующий элемент
	list* h = NULL;                                        // Указатель на предыдущий элемент
	list* fst = first;                                     // Постоянный указатель на первый элемент
	while (p != NULL)
	{
		if (p->data % 2 != 0)                              // Если элемент нечëтный, то пропускаем
		{
			if (p->next != NULL)                           // Если следующий за нечётным элемент не последний
			{
				h = p;                                     // Указатель на "предыдущий" элемент
				p = p->next;                               // Перенос указателя на следующий элемент
				p->prev = h;                               // Указатель на предыдущий элемент
			}
			else
			{
				p = p->next;                               // Перенос указателя на следующий элемент
			}
		}
		else
		{
			if (p->next != NULL)                           // Если следующий за чётным элемент на последний
			{
				if (p->prev != NULL)
				{
					h = p->prev;                               // Запоминание предыдущего элемента
					list* padd = p->next;                      // Запоминание следующего за удаляемым элемента
					delete p;                                  // Удаление элемента
					p = h;                                     // Ставим указатель на предшествующий за удалённым элемент 
					p->next = padd;                            // Указатель на следующий элемент
					p = p->next;                               // Перенос указателя на следующий элемент
					p->prev = h;                               // Указатель на предыдущий элемент
				}
				else
				{
					list* padd = p->next;                      // Запоминание следующего за удаляемым элемента
					delete p;                                  // Удаление элемента
					p = padd;                                  // Ставим указатель на предшествующий за удалённым элемента
					p->prev = NULL;                            // Указатель на предыдущий элемент
					fst = p;                                   // Новый первый элемент списка
				}
			}
			else                                               // Если следующий за чётным элемент на последний
			{
				if (p->prev == NULL)
				{
					p = NULL;
					fst = NULL;
				}
				else 
				{
					h = p->prev;
					delete p;
					p = h;
					p->next = NULL;
					p = p->next;
				}

			}
		}
	}
	return fst;											       // Возвращаем указатель на первый элемент, так как с него начинается обращение
}

int main()
{
	system("chcp 1251>nul");
	cout << "Введите количество элементов в двунаправленном списке: ";
	int N;
	cin >> N;
	while (N < 3)
	{
		cout << "Число элементов не может быть меньше трёх. Введите новое число элементов: ";
		cin >> N;
	}
	list* first;                             // Указатель на первый элемент списка
	first = FormList(N);                     // Получение указателя на первый элемент
	PrintList(first);                        // Вывод списка на консоль
	first = DeleteElementsInList(first);     // Удаление элемента из списка
	PrintList(first);                        // Вывод списка на консоль
}