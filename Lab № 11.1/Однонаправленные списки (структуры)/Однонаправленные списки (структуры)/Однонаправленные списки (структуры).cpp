#include <iostream>
using namespace std;

struct list                     // Структура "Однонаправленный список"
{
	char data;                  // Информационное поле (хранит элемент списка)
	list* next;                 // Адресное поле (хранит указатель на следующий элемент списка)
};

list* FormList(int Size)                      // Функция записи списка
{ 
	int i;
	cout << "Введите элементы списка:\n";
	list* first;                              // Указатель на первый элемент
	first = NULL;                             // Пока элементов в списке нет, указатель на пкрвый элемент равен нулю
	list* p = new list;                       // Выделение памяти под элемент
	cin >> p->data;                           // Ввод значения первого элемента
	first = p;                                // Указатель на первый элемент
	for (i = 2; i <= Size; i++)
	{
		list* q = new list;                   // Выделение памяти под новый элемент
		p->next = q;                          // Создание указателя на следующий элемент
		p = p->next;                          // Переход указателем на следующий элемент
		cin >> p->data;                       // Запись нового элемента
		p->next = NULL;                       // Указатель на следующий элемент равен нулю, т. к. был записан последний элемент
	}
	return first;                             // Возвращаем указатель на первый элемент, т. к. с него начинается обращение
}

void PrintList(list* first)                   // Функция вывода списка на консоль
{
	cout << "Вывод списка...\n";
	list* p = first;                          // Указатель на первый элемент списка
	while (p != NULL)
	{

		cout << p->data << " ";               // Вывод значения элемента списка
		p = p->next;                          // Переход указателем на следующий элемент
	}
	cout << endl;
}

bool IsKeyInList(list* first, char Key)       // Функция проверки ключа в списке
{
	list* p = first;                          // Указатель на первый элемент списка
	while (p!= NULL)
	{
		if (p->data == Key)                   // Элемент списка совпал с ключом
		{
			return true;
		}
		else
		{
			p = p->next;                      // Переход на следующий элемент
		}
	}
	return false;
}

list* AddElementInList(list* first, char Key, char Element)     // Функция добавления элемента в список
{
	list* fst = first;                                          // Постоянный указатель на первый элемент (возвращаемый)
	if (IsKeyInList(first, Key) == true)                        // Проверка на присутствие ключа в списке
	{
		list* p = first;                                        // Указатель на первый элемент
		while (p != NULL)
		{
			if (p->data != Key)                                 // Если произошло совпадения информационного поля элемента списка с ключом
			{
				p = p->next;                                    // Перемещение на следующий элемент
			}
			else
			{
				if (p->next != NULL)                                // Если элемент не последний в списке
				{
					list* q = new list;                             // Выделение памяти под новый элемент
					list* padd = new list;                          // Хранит следующий элемент в неизменённом списке 
					padd = p->next;                                 // Запоминаем следующий элемент в неизменённом списке
					p->next = q;                                    // Создание указателя на следующий элемент
					p = p->next;                                    // Переход указателем на следующий элемент
					p->data = Element;                              // Ввод нового элемента
					p->next = padd;                                 // Указатель на следующий элемент в неизменённом списке
					p = p->next;                                    // Переход на следующий элемент
				}
				else                                                // Если элемент последний в списке
				{
					list* q = new list;                             // Выделение памяти под новый элемент
					p->next = q;                                    // Создание указателя на следующий элемент
					p = p->next;                                    // Переход указателем на следующий элемент
					p->data = Element;                              // Ввод нового элемента
					p->next = NULL;
				}
			}
		}
		return fst;                                                  // Возвращаем указатель на первый элемент, т. к. с него начинается обращение
	}
	else
	{
		cout << "Такого элемента не найдено. Список остался тем же\n";
		return fst;
	}
}

int main()
{
	system("chcp 1251>nul");
	cout << "Введите количество элементов в однонаправленном списке: ";
	int N;
	cin >> N;
	while (N < 3)
	{
		cout << "Число элементов не может быть меньше трёх. Введите новое число элементов: ";
		cin >> N;
	}
	list* first;                                      // Указатель на первый элемент списка
	first = FormList(N);                              // Получение указателя на первый элемент
	PrintList(first);                                 // Вывод списка на консоль
	cout << "Какой элемент вы хотите добавить в список?\n";
	char Element;                                     // Добавленный элемент
	cin >> Element;
	cout << "Введите элемент, после которого хотите вставить новый элемент: ";
	char Key;                                         // Элемент, после которого необходимо добавить новый элемент
	cin >> Key;
	first = AddElementInList(first, Key, Element);    // Добавление элемента в список
	PrintList(first);                                 // Вывод списка на консоль
}

// Сделана блок-схема, перенесён код, нужно сделать результаты работы